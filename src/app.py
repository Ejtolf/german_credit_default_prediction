import streamlit as st
import pandas as pd
import joblib
import numpy as np

@st.cache_resource
def load_model():
    return joblib.load("..models/rf_model.pkl")

model = load_model()
classes = list(model.classes_)
bad_idx = classes.index(0)

st.set_page_config(page_title="Credit Scoring Demo", page_icon="üí≥", layout="centered")
st.title("üí≥ Credit Scoring ‚Äî German Credit (Demo)")
st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∏—Å–∫–∞.")

with st.form("scoring_form"):
    age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=85, value=29, step=1)
    sex = st.selectbox("–ü–æ–ª", ["male", "female"])
    job = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã (job)", [0,1,2,3])
    housing = st.selectbox("–ñ–∏–ª—å—ë", ["own", "rent", "free"])
    saving_accounts = st.selectbox("–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç", ["no_info","little","moderate","quite rich","rich"])
    checking_account = st.selectbox("–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç", ["no_info","little","moderate","rich"])
    credit_amount = st.number_input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", min_value=100, max_value=20000, value=5000, step=100)
    duration = st.number_input("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–º–µ—Å.)", min_value=4, max_value=72, value=24, step=1)
    purpose = st.selectbox("–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", [
        "car","radio/TV","furniture/equipment","education","business","domestic appliances","repairs","vacation","retraining","other"
    ])
    monthly_payment = credit_amount / duration

    submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫")

if submitted:
    X_input = pd.DataFrame([{
        "age": age,
        "sex": sex,
        "job": job,
        "housing": housing,
        "saving_accounts": saving_accounts,
        "checking_account": checking_account,
        "credit_amount": credit_amount,
        "duration": duration,
        "purpose": purpose,
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º df
        "monthly_payment": monthly_payment
    }])

    proba = model.predict_proba(X_input)[0]
    proba_bad = float(proba[bad_idx])
    proba_good = float(proba[1-bad_idx])

    # –ü–æ—Ä–æ–≥ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å
    threshold = st.slider("–ü–æ—Ä–æ–≥ –æ–¥–æ–±—Ä–µ–Ω–∏—è (–ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ bad)", 0.0, 1.0, 0.5, 0.01)
    decision = "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å" if proba_bad >= threshold else "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å"

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    st.metric(label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ (bad)", value=f"{proba_bad:.1%}")
    st.metric(label="–†–µ—à–µ–Ω–∏–µ", value=decision)

    # –ù–µ–±–æ–ª—å—à–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
    st.caption(
        "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ—Ä—è–¥–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª–∏: "
        f"{classes}. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ bad={0}."
    )

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü–æ—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å/–ø–∞–π—Ç–ª–∞–π–Ω —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç)
    try:
        import numpy as np
        # –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-–≤–∞–∂–Ω—ã–µ —Ñ–∏—á–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
        if hasattr(model.named_steps["model"], "feature_importances_"):
            st.write("–¢–æ–ø-–≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ø–æ –º–æ–¥–µ–ª–∏):")
            importances = model.named_steps["model"].feature_importances_
            # –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º–µ–Ω–∞ —Ñ–∏—á–µ–π –ø–æ—Å–ª–µ OHE
            ohe = model.named_steps["preprocessor"].transformers_[1][1].named_steps["encoder"]
            num_feats = model.named_steps["preprocessor"].transformers_[0][2]
            cat_feats = model.named_steps["preprocessor"].transformers_[1][2]
            ohe_names = ohe.get_feature_names_out(cat_feats)
            feature_names = np.concatenate([num_feats, ohe_names])
            top_idx = np.argsort(importances)[-10:][::-1]
            top_table = pd.DataFrame({
                "feature": feature_names[top_idx],
                "importance": importances[top_idx]
            })
            st.dataframe(top_table, use_container_width=True)
    except Exception as e:
        st.caption("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤ –¥–µ–º–æ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).")

st.divider()
st.caption("Demo. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏, –≤–∞–ª–∏–¥–∞—Ü–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
