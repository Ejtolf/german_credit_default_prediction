import io
import numpy as np
import pandas as pd
import streamlit as st
import joblib
from typing import Dict, Any

st.set_page_config(page_title="Credit Risk Scoring", page_icon="üí≥", layout="wide")
st.title("üí≥ Credit Risk Scoring Demo")
st.caption("–ú–æ–¥–µ–ª—å: RandomForest + –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ (StandardScaler + OneHotEncoder). –ú–µ—Ç–∫–∏: 0=bad, 1=good")

MODEL_PATH = "src/models/rf_model.pkl"

FEATURES = [
    "age", "sex", "job", "housing", "saving_accounts",
    "checking_account", "credit_amount", "duration", "purpose",
]

JOB_MAP = {
    "–ù–µ—Ç —Ä–∞–±–æ—Ç—ã, –Ω–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏": 0,
    "–ï—Å—Ç—å —Ä–∞–±–æ—Ç–∞, –Ω–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏": 1,
    "–ï—Å—Ç—å —Ä–∞–±–æ—Ç–∞, –µ—Å—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è": 2,
    "–í—ã—Å—à–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è / –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": 3,
}
HOUSING_MAP = {"–õ–∏—á–Ω–æ–µ": "own", "–ê—Ä–µ–Ω–¥–∞": "rent", "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ": "free"}
SAVING_MAP = {
    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö": "no_info", "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å": "little",
    "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å": "moderate", "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ": "quite rich", "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å": "rich",
}
CHECKING_MAP = {
    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö": "no_info", "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å": "little",
    "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å": "moderate", "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å": "rich",
}
PURPOSE_MAP = {
    "–ê—É–¥–∏–æ-/–í–∏–¥–µ–æ—Ç–µ—Ö–Ω–∏–∫–∞": "radio/TV", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "education",
    "–ú–µ–±–µ–ª—å/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": "furniture/equipment", "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç": "car",
    "–ë–∏–∑–Ω–µ—Å": "business", "–†–µ–º–æ–Ω—Ç": "repairs",
    "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞": "domestic appliances", "–û—Ç–¥—ã—Ö/–î—Ä—É–≥–æ–µ...": "vacation/others",
}
SEX_VALUES = ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]

@st.cache_resource
def load_model():
    return joblib.load(MODEL_PATH)

model = load_model()
CLASSES = np.array(getattr(model, "classes_", [0, 1]))
IDX_BAD = int(np.where(CLASSES == 0)[0][0])
IDX_GOOD = int(np.where(CLASSES == 1)[0][0])

def ru_to_model_values(row_ru: Dict[str, Any]) -> Dict[str, Any]:
    row = dict(row_ru)
    row["job"] = JOB_MAP[row["job"]]
    row["housing"] = HOUSING_MAP[row["housing"]]
    row["saving_accounts"] = SAVING_MAP[row["saving_accounts"]]
    row["checking_account"] = CHECKING_MAP[row["checking_account"]]
    row["purpose"] = PURPOSE_MAP[row["purpose"]]
    return row

def coerce_and_order_df(df: pd.DataFrame) -> pd.DataFrame:
    return df[FEATURES]

def predict_with_threshold(df_model: pd.DataFrame, threshold: float = 0.5) -> pd.DataFrame:
    proba = model.predict_proba(df_model)
    pred = model.predict(df_model)
    proba_bad = proba[:, IDX_BAD]
    proba_good = proba[:, IDX_GOOD]
    pred_thr = (proba_good >= threshold).astype(int)
    return pd.DataFrame({
        "pred": pred,
        "proba_bad": proba_bad,
        "proba_good": proba_good,
        "pred_thr": pred_thr,
    })

with st.sidebar:
    thr = st.slider("–ü–æ—Ä–æ–≥ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ (–∫–ª–∞—Å—Å 1)", 0.0, 1.0, 0.5, 0.01)
    st.caption("–ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ‚â• –ø–æ—Ä–æ–≥–∞, —Ä–µ—à–µ–Ω–∏–µ = –û–î–û–ë–†–ò–¢–¨, –∏–Ω–∞—á–µ = –û–¢–ö–õ–û–ù–ò–¢–¨.")

tab1, tab2 = st.tabs(["üßç Single", "üìÑ Batch CSV"])

with tab1:
    col1, col2 = st.columns(2)
    ui_values = {}
    with col1:
        ui_values["age"] = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", 18, 90, 30)
        ui_values["job"] = st.selectbox("–†–∞–±–æ—Ç–∞/–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", list(JOB_MAP.keys()), 1)
        ui_values["credit_amount"] = st.number_input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", 100, 200000, 3000)
        ui_values["duration"] = st.slider("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–µ—Å.)", 4, 72, 24)
        ui_values["sex"] = st.selectbox("–ü–æ–ª", SEX_VALUES, 0)
    with col2:
        ui_values["housing"] = st.selectbox("–ñ–∏–ª—å—ë", list(HOUSING_MAP.keys()), 0)
        ui_values["saving_accounts"] = st.selectbox("–°–±–µ—Ä–µ–∂–µ–Ω–∏—è", list(SAVING_MAP.keys()), 0)
        ui_values["checking_account"] = st.selectbox("–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç", list(CHECKING_MAP.keys()), 0)
        ui_values["purpose"] = st.selectbox("–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", list(PURPOSE_MAP.keys()), 0)

    if st.button("–ê–ù–ê–õ–ò–ó", use_container_width=True):
        try:
            model_row = ru_to_model_values(ui_values)
            df_in = coerce_and_order_df(pd.DataFrame([model_row]))
            res = predict_with_threshold(df_in, threshold=thr).iloc[0]

            base_pred_text = "–ù–ê–î–Å–ñ–ï–ù (good, –∫–ª–∞—Å—Å 1)" if int(res["pred"]) == 1 else "–ù–ï–ù–ê–î–Å–ñ–ï–ù (bad, –∫–ª–∞—Å—Å 0)"
            thr_pred_text = "–ù–ê–î–Å–ñ–ï–ù (good, –∫–ª–∞—Å—Å 1)" if int(res["pred_thr"]) == 1 else "–ù–ï–ù–ê–î–Å–ñ–ï–ù (bad, –∫–ª–∞—Å—Å 0)"

            if "–ù–ï–ù–ê–î–Å–ñ–ï–ù" in base_pred_text:
                st.error(f"–ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (argmax): **{base_pred_text}**")
            else:
                st.success(f"–ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (argmax): **{base_pred_text}**")

            if "–ù–ï–ù–ê–î–Å–ñ–ï–ù" in thr_pred_text:
                st.error(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥—É {thr:.2f}: **{thr_pred_text}**")
            else:
                st.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥—É {thr:.2f}: **{thr_pred_text}**")

            st.markdown("**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤:**")
            st.json({
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞ (bad=0)": float(res["proba_bad"]),
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–≥–∞—à–µ–Ω–∏—è (good=1)": float(res["proba_good"]),
            })
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

with tab2:
    upl = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])
    if upl is not None:
        try:
            df = pd.read_csv(upl)
            df = coerce_and_order_df(df)
            out = predict_with_threshold(df, threshold=thr)
            result = pd.concat([df.reset_index(drop=True), out], axis=1)
            st.dataframe(result.head(50), use_container_width=True)
            buf = io.BytesIO()
            result.to_csv(buf, index=False)
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å predictions.csv", buf.getvalue(),
                               file_name="predictions.csv", mime="text/csv", use_container_width=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
